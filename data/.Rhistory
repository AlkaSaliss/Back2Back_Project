x0 = rep(0.5, n)
gradientfix(x0,A, b, rho, eps, nmax)
print("a", 1)
print("a"+1)
cat("a", 1)
gradientfix = function(x0, A, b, rho, eps, nmax){
x_k = x0
for(k in 1:nmax){
d_k = b - A%*%x_k #d_k est un vecteur
x_k1 = x_k + rho*d_k
if(norm(d_k)<eps & k < nmax){
print(cat("la méthode converge après ",k, " itérations"))
return(list("x_k1" = x_k1, "k" = k))
}
else{
x_k = x_k1
}
}
}
n = 5
eps = 10^(-7)
nmax = 1000
rho = 0.1
library(pracma)
A = Diag(rep(2, n), k = 0) + Diag(rep(-1, n-1), k = 1) + Diag(rep(-1, n-1), k = -1)
b = rep(1, n)
x0 = rep(0.5, n)
gradientfix(x0,A, b, rho, eps, nmax)
gradientfix = function(x0, A, b, rho, eps, nmax){
x_k = x0
for(k in 1:nmax){
d_k = b - A%*%x_k #d_k est un vecteur
x_k1 = x_k + rho*d_k
if(norm(d_k)<eps & k < nmax){
print(cat("la méthode converge après ",k, " itérations"))
return(list("x_k1" = x_k1, "k" = k))
}
else{
x_k = x_k1
}
}
}
gradientfix(x0,A, b, rho, eps, nmax)
x = rep(1,n)
fx = 0.5*t(x)%*%A%*%x - t(x)%*%b
fx
seq(1,5,0.5)
rep(seq(1,5,0.5),2)
seq(1,3,0.5)
seq(rep(1,2),3,0.5)
rep(seq(1,5,0.5),each = 2)
f = function(x, A, b){
return(0.5*t(x)%*%A%*%x - t(x)%*%b)
}
xseq = c()
fxseq = c()
for(i in 0:20){
xseq = c(xseq, rep(i, n))
fxseq = c(fxseq, f(rep(i,n), A, b) )
}
x_sqe
xseq
fxseq
n = 2
eps = 10^(-7)
nmax = 1000
rho = 0.1
A = Diag(rep(2, n), k = 0) + Diag(rep(-1, n-1), k = 1) + Diag(rep(-1, n-1), k = -1)
b = rep(1, n)
x0 = rep(0.5, n)
gradientfix(x0,A, b, rho, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
xk_1 <- x_k + rho_k*d_k
d_k1 <- b - A %*% x_k1
rho_k1 <- norm(d_k1, "2")/(t(d_k1) %*% A %*% d_k1)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradienopt(x0,A, b, eps, nmax)
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
xk_1 <- x_k + rho_k %*% d_k
d_k1 <- b - A %*% x_k1
rho_k1 <- norm(d_k1, "2")/(t(d_k1) %*% A %*% d_k1)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
xk_1 <- x_k + rho_k * d_k
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
xk_1 <- x_k + rho_k * d_k
d_k1 <- b - A %*% x_k1
rho_k1 <- norm(d_k1, "2")/(t(d_k1) %*% A %*% d_k1)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
xk_1 <- x_k + rho_k %*% d_k
d_k1 <- b - A %*% x_k1
rho_k1 <- norm(d_k1, "2")/(t(d_k1) %*% A %*% d_k1)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k %*% d_k
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
x0
A
b
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
rho_k
d_k
rho_k %*% d_k
d_k %*% rho_k
x_k
rho_k %*% t(d_k)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k %*% t(d_k)
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
x0
x_k <- x0
d_k <- b - A %*% x_k
x_k
d_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
rho_k
rho_k %*% t(d_k)
x_k + rho_k %*% t(d_k)
x_k
d_k <- b - A %*% x_k
d_k
x2 <- x_k + rho_k %*% t(d_k)
d_k <- b - A %*% x2
A
x2
d_k <- b - A %*% t(x2)
d_k
d_k <- b - A %*% t(x_k)
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
k <- k + 1
x_k <- x_k + rho_k %*% t(d_k)
d_k <- b - A %*% t(x_k)
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k %*% t(d_k)
d_k <- b - A %*% t(x_k)
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k %*% d_k
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k %*% d_k
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k * d_k
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
rho_k
rho_k * d_k
d_k
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k * d_k
d_k <- b - A %*% x_k
rho_k <- norm(d_k, "2")/(t(d_k) %*% A %*% d_k)
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k * d_k
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientopt(x0,A, b, eps, 2000)
gradientopt(x0,A, b, eps, nmax)
gradientfix(x0,A, b, eps, nmax)
gradientfix(x0,A, b, rho, eps, nmax)
x0 = rep(0, n)
gradientopt(x0,A, b, eps, nmax)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k * d_k
d_k <- b - A %*% x_k
rho_k <- as.numeric(norm(d_k, "2")/(t(d_k) %*% A %*% d_k))
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
d_k
norm(d_k, "2")
0.5**2
norm(d_k, "F")
0.5**2+0.5**2
d_k
sum(d_k)
d = matrix(c(1,2))
d
sum(d)
sum(d**2)
sum(d_k**2)
gradientopt = function(x0, A, b, eps, nmax){
x_k <- x0
d_k <- b - A %*% x_k
rho_k <- as.numeric(sum(d_k**2)/(t(d_k) %*% A %*% d_k))
k <- 0
while(k < nmax & norm(d_k)>eps){
k <- k + 1
x_k <- x_k + rho_k * d_k
d_k <- b - A %*% x_k
rho_k <- as.numeric(sum(d_k**2)/(t(d_k) %*% A %*% d_k))
}
print(cat("La méthode converge après ", k, " itérations."))
return(x_k)
}
gradientopt(x0,A, b, eps, nmax)
gradientconj = function(x0, A, b, eps, nmax){
gk <- A %*% x0 - b
dk <- -go
xk = x0
for (k in 0:nmax){
rho_k <- -(t(gk) %*% dk)/(t(dk)%*%A%*%dk)
xk_1 <- xk + rho_k %*% dk
gk_1 <- gk + rho_k %*% A %*% dk
betak <- (t(gk_1)%*%gk_1)/(t(gk)%*%gk)
dk_1 <- -gk_1 + betak%*%dk
if(sum(gk_1**2)<eps){
return(xk)
}
}
print("n'a pas convergé")
}
gradientconj(x0,A, b, eps, nmax)
gradientconj = function(x0, A, b, eps, nmax){
gk <- A %*% x0 - b
dk <- -g0
xk = x0
for (k in 0:nmax){
rho_k <- -(t(gk) %*% dk)/(t(dk)%*%A%*%dk)
xk_1 <- xk + rho_k %*% dk
gk_1 <- gk + rho_k %*% A %*% dk
betak <- (t(gk_1)%*%gk_1)/(t(gk)%*%gk)
dk_1 <- -gk_1 + betak%*%dk
if(sum(gk_1**2)<eps){
return(xk)
}
}
print("n'a pas convergé")
}
gradientconj(x0,A, b, eps, nmax)
Normal1 <- function(numLearn, numTest){
library("MASS")
l1 <- mvrnorm(numLearn, c(0,0), matrix(c(1,1,1,4), nrow = 2, ncol = 2, byrow = TRUE))
l2 <- mvrnorm(numLearn, c(1,1), matrix(c(1,1,1,4), nrow = 2, ncol = 2, byrow = TRUE))
t1 <- mvrnorm(numTest, c(0,0), matrix(c(1,1,1,4), nrow = 2, ncol = 2, byrow = TRUE))
t2 <- mvrnorm(numTest, c(1,1), matrix(c(1,1,1,4), nrow = 2, ncol = 2, byrow = TRUE))
learnData <- rbind(cbind(l1, rep(0, numLearn)),cbind(l2, rep(1, numLearn)))
testData <- rbind(cbind(t1, rep(0, numTest)),cbind(t2, rep(1, numTest)))
rez <- list(learn = learnData, test = testData)
return(rez)
}
library("MASS")
res <- Normal1(numLearn = 20, numTest = 10)
res
names(res)
res$learn
install.packages("ggplot2")
library("ggplot2")
res$learn[,1]
res$learn[,2]
res$learn[,3]
plot(x = res$learn[,1], y = res$learn[,2])
plot(x = res$learn[,1], y = res$learn[,2], col = res$learn[,3])
plot(x = res$learn[,1], y = res$learn[,2], col = as.factor(res$learn[,3]))
learn = data.frame(res$learn)
learn
learn = data.frame(res$learn)
colnames(learn) <- c("X", "Y", "label")
learn
qplot(X, Y, data = learn, colour = label)
learn$label <- as.factor(learn$label)
qplot(X, Y, data = learn, colour = label)
p <- ggplot(learn, aes(X, Y, colour = label)) + geom_point() + ggtitle("Learning data")
p <- ggplot(learn, aes(X, Y, colour = label)) + geom_point() + ggtitle("Learning data")
p
lda(data = learn, label ~ .)
predict(lda, data =learn)
predict(lda, newdata = learn)
modlda <- lda(data = learn, label ~ .)
predict(modlda, newdata = learn)
predlda <- predict(modlda, newdata = learn)
predlda$class
learn$label
predlda <- predict(modlda, newdata = test)
res <- Normal1(numLearn = 100, numTest = 100)
learn = data.frame(res$learn)
colnames(learn) <- c("X", "Y", "label")
learn$label <- as.factor(learn$label)
test = data.frame(res$test)
colnames(test) <- c("X", "Y", "label")
test$label <- as.factor(test$label)
ggplot(learn, aes(X, Y, colour = label)) + geom_point() + ggtitle("Learning data")
ggplot(test, aes(X, Y, colour = label)) + geom_point() + ggtitle("Learning data")
modlda <- lda(data = learn, label ~ .)
predlda <- predict(modlda, newdata = test)
predlda
predlda$class
library("ROCR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
modlda <- lda(data = learn, label ~ .)
predlda <- predict(modlda, newdata = test)
pred <- prediction(predlda$class, test$label)
predlda$class
type(predlda$class)
class(predlda$class)
pred <- prediction(c(predlda$class), test$label)
pred
plot(acc)
modlda <- lda(data = learn, label ~ .)
predlda <- predict(modlda, newdata = test)
pred <- prediction(c(predlda$class), test$label)
acc <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(acc)
acc@y.values
auc <- performance(pred, measure = "auc")
auc
auc@y.values[1]
auc@y.values[[1]
plot(acc)
auc@y.values[[1]]
text(x=)
plot(acc)
plot(acc)
text(0.9, 0.1, labels = auc@y.values[[1]])
plot(acc)
text(0.9, 0.1, labels = cat("AUC: ",auc@y.values[[1]]))
"a"+2
plot(acc)
text(0.9, 0.1, labels = paste("AUC: ",auc@y.values[[1]]))
acc
plot(learn$X, learn$Y, col = learn$label)
df = data.frame(x=acc@x.values[[1]], y = acc@y.values[[1]])
df
df = data.frame(x=acc@x.values[[1]], y = acc@y.values[[1]])
ggplot(df, aes(x, y)) + geom_line() + ggtitle("ROC Curve") + annotate("text", 0.9, 0.1, label = paste("AUC: ",auc@y.values[[1]]) )
get_roc <- function(pred, label, typeofmodel){
predi <- prediction(pred, label)
acc <- performance(predi, measure = "tpr", x.measure = "fpr")
auc <- performance(pred, measure = "auc")
df = data.frame(x=acc@x.values[[1]], y = acc@y.values[[1]])
ggplot(df, aes(x, y)) + geom_line() + ggtitle(paste("ROC Curve - "), typeofmodel) + annotate("text", 0.9, 0.1, label = paste("AUC: ",auc@y.values[[1]]) )
}
get_roc(c(predlda$class), test$label, "LDA")
get_roc <- function(pred, label, typeofmodel){
predi <- prediction(pred, label)
acc <- performance(predi, measure = "tpr", x.measure = "fpr")
auc <- performance(predi, measure = "auc")
df = data.frame(x=acc@x.values[[1]], y = acc@y.values[[1]])
ggplot(df, aes(x, y)) + geom_line() + ggtitle(paste("ROC Curve - "), typeofmodel) + annotate("text", 0.9, 0.1, label = paste("AUC: ",auc@y.values[[1]]) )
}
get_roc(c(predlda$class), test$label, "LDA")
modqda <- qda(data = learn, label ~ .)
predqda <- predict(modqda, newdata = test)
get_roc(c(predqda$class), test$label, "QDA")
learn[, :2]
learn[, 1:2]
knn(learn[, 1:2], test[, 1:2], learn$label, k = 5)
library(class)
knn(learn[, 1:2], test[, 1:2], learn$label, k = 5)
modknn <- knn(learn[, 1:2], test[, 1:2], learn$label, k = 5)
summary(modknn)
names(modknn)
nrow(learn)
modknn
get_roc(modknn, test$label, "KNN")
get_roc(c(modknn), test$label, "KNN")
install.packages("gbm")
df <- data.frame(y = runif(30), x1 = rnorm(30), x2 = rnorm(30))
View(df)
setwd("~/Documents/GL/Projet/Back2Back_Project/data")
write.table(df, file = "testreg.csv", sep =";")
write.table(df, file = "testreg.csv", sep =";", row.names = FALSE)
write.table(df, file = "testreg.csv", sep =",", row.names = FALSE)
